1 - Utilizar recursividade em algoritmos de árvore binária de busca pode ser mais intuitivo do que utilizar iteratividade, porém a recursividade na maioria das vezes é mais custosa, pois a função é chamada várias vezes, e acaba sendo criada uma pilha de recursão, resultando em um maior uso de memória do que um algoritmo iterativo utilizaria.

3 - Se baseando no código do exercício anterior que usa um algoritmo recursivo, a princípio uma árvore de tamanho pequeno aparenta ser eficiente na questão de recursos. Porém, cada etapa da recursão em uma árvore é armazenada na call stack, que vai acumulando todas as etapas anteriores ao nó atual que ainda não foram chamadas. Isso acaba ocupando um espaço de memória no computador que fica sem muitas alterações por vários ciclos da CPU. Em um algoritmo iterativo, não temos chamadas de funções repetidas vezes, o que elimina a necessidade do uso da call stack, deixando a lógica mais difícil de se entender a princípio para um programador acostumado com a recursividade, mas usa menos memória durante o seu processamento.